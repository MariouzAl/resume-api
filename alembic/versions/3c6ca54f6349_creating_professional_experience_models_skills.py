"""creating professional experience models skills

Revision ID: 3c6ca54f6349
Revises: 72967b52a24e
Create Date: 2025-08-05 14:17:28.131649

"""
from datetime import date
from typing import Sequence, Union, cast

from alembic import op
import sqlalchemy as sa
from sqlmodel import Session, select


from src.professional_experience.infrastructure.models.professional_experience_model import Company, ProfessionalExperience
from src.skills.infrastructure.models import Skill


# revision identifiers, used by Alembic.
revision: str = '3c6ca54f6349'
down_revision: Union[str, Sequence[str], None] = '72967b52a24e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    try :
        op.create_table('professionalexperienceskilllink',
        sa.Column('professional_experience_id', sa.Uuid(), nullable=False),
        sa.Column('skill_id', sa.Uuid(), nullable=False),
        sa.ForeignKeyConstraint(['professional_experience_id'], ['professional_experience.id'], ),
        sa.ForeignKeyConstraint(['skill_id'], ['skill.id'], ),
        sa.PrimaryKeyConstraint('professional_experience_id', 'skill_id')
        )
    except Exception:
        print('Table existed but no problem ') 
    # ### end Alembic commands ###
    with Session(bind=op.get_bind()) as session :
        java_skill = Skill(skill="Java",level=50, firstUsedDate=date(2009,1,1))
        ionic_skill = Skill(skill="Ionic",level=50, firstUsedDate=date(2012,1,1))
        phonegap_skill = Skill(skill="Phonegap",level=50, firstUsedDate=date(2012,1,1))
        adobe_flex_skill = Skill(skill="Adobe Flex",level=90, firstUsedDate=date(2010,1,1))
        adobe_air_skill = Skill(skill="Adobe AIR",level=90, firstUsedDate=date(2010,1,1))
        
        statement = select(Company).where(Company.name=="Grupo CICE")
        cice=session.exec(statement).first()
        statement = select(ProfessionalExperience).where(ProfessionalExperience.company==cice)
        cice_experience=session.exec(statement).first()
        if cice_experience: 
            column_skill=cast(sa.Column[str],Skill.skill)
            skills_list = ['HTML','CSS', "JavaScript",'TypeScript', "Android Development" , "Java", "Ionic", "Phonegap", "Adobe Flex", "Adobe AIR"]
            statement = select(Skill).where(column_skill.in_(skills_list))
            result = session.exec(statement).all()

            all_cice_skills =list(result)
            all_cice_skills.append(java_skill)
            all_cice_skills.append(ionic_skill)
            all_cice_skills.append(phonegap_skill)
            all_cice_skills.append(adobe_flex_skill)
            all_cice_skills.append(adobe_air_skill)

            cice_experience.tech_stack =all_cice_skills
            
            session.add(cice_experience)
            session.commit()
            

def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('professionalexperienceskilllink')
    # ### end Alembic commands ###
