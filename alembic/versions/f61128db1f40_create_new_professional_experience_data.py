"""create new professional experience data

Revision ID: f61128db1f40
Revises: db5a482b123c
Create Date: 2025-08-17 18:11:56.387262

"""

from datetime import date
from typing import Sequence, Union, cast

from alembic import op
import sqlalchemy as sa
from sqlmodel import Session, select


from src.project.infrastructure.models.project import Project
from src.professional_experience.infrastructure.models.professional_experience_model import (
    Company,
    ProfessionalExperience,
    Responsibility,
)
from src.project.infrastructure.models.project_images import ProjectImages
from src.project.infrastructure.models.project_category_model import ProjectCategory
from src.skills.infrastructure.models import Skill


# revision identifiers, used by Alembic.
revision: str = "f61128db1f40"
down_revision: Union[str, Sequence[str], None] = "db5a482b123c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    with Session(bind=op.get_bind()) as session:
        statement = select(Company).where(Company.name == "Grupo CICE")
        cice = session.exec(statement).first()
        if cice is None:
            return
        pe = ProfessionalExperience(
            company=cice,
            key="neus-team-grupo-cice",
            endDate=date(2016, 1, 1),
            startDate=date(2012, 1, 1),
            position="Frontend and Mobile Developer",
        )
        session.add(pe)
        statement = select(ProjectCategory)
        categories = list(session.exec(statement).all())
        mobile_app_categories = [cats for cats in categories if cats.name == "Apps"]

        statement = select(ProjectImages)
        mobile_app_images = list(session.exec(statement).all())

        responsibilities = [
            "Developing mobile apps with Adobe Flex/Adobe Air consuming SOAP services built with Java",
            "Development of a mobile app for the Android platform using Android SDK with Java",
            "Development of a mobile app for the Android platform using Ionic and Cordova",
            "Leading the development of mobile apps",
            "Development SPA web app made with Angular",
        ]
        all_responsibilities = [
            Responsibility(description=responsibility)
            for responsibility in responsibilities
        ]

        column_skill = cast(sa.Column[str], Skill.skill)
        skills_list = [
            "HTML",
            "CSS",
            "JavaScript",
            "TypeScript",
            "Android Development",
            "Java",
            "Ionic",
            "Phonegap",
            "Adobe Flex",
            "Adobe AIR",
        ]
        statement = select(Skill).where(column_skill.in_(skills_list))
        mobile_app_skills = list(session.exec(statement).all())
        project = Project(
            key="mobile-app-combustibles",
            project="Mobile app: Fuel Dispatch",
            shortDescription="A mobile application for Android devices, built using the Adobe AIR platform, designed to register fuel dispatches.",
            fullDescription="A mobile application for Android devices, built using the Adobe AIR platform, designed to register fuel dispatches.",
            link="/img/portfolio/app1.jpg",
            projectLink="#",
            cover="./projects/combustibles/cover.png",
            professional_experience=pe,
            start_date=date(2012, 1, 1),
            end_date=date(2012, 9, 1),
            categories=mobile_app_categories,
            images=mobile_app_images,
            responsibilities=all_responsibilities,
            skills=mobile_app_skills,
        )
        session.add(project)
        session.commit()


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    with Session(bind=op.get_bind()) as session:
        statement = select(Project).where(Project.key=="mobile-app-combustibles")
        mobile_app_combustibles= session.exec(statement).first()
        if mobile_app_combustibles is None:
            return 
        session.delete(mobile_app_combustibles)
        session.commit()